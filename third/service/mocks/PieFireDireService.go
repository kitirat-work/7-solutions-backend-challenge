// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"
	service "piefiredire/service"

	mock "github.com/stretchr/testify/mock"
)

// PieFireDireService is an autogenerated mock type for the PieFireDireService type
type PieFireDireService struct {
	mock.Mock
}

// BeefSummary provides a mock function with given fields: ctx
func (_m *PieFireDireService) BeefSummary(ctx context.Context) (service.BeefSummary, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeefSummary")
	}

	var r0 service.BeefSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (service.BeefSummary, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) service.BeefSummary); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(service.BeefSummary)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPieFireDireService creates a new instance of PieFireDireService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPieFireDireService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PieFireDireService {
	mock := &PieFireDireService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
